#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5

sem_t forks[NUM_PHILOSOPHERS];

void* philosopher(void* arg) {
    int id = *(int*)arg;
    int left = id;
    int right = (id + 1) % NUM_PHILOSOPHERS;

    if (id == NUM_PHILOSOPHERS - 1) {
        left = (id + 1) % NUM_PHILOSOPHERS;
        right = id;
    }

    while(1) {
        printf("Philosopher %d is thinking.\n", id);
        sleep(rand() % 3);

        sem_wait(&forks[left]);
        printf("Philosopher %d picked up fork %d (left).\n", id, left);


        sem_wait(&forks[right]);
        printf("Philosopher %d picked up fork %d (right).\n", id, right);


        printf("Philosopher %d is eating.\n", id);
        sleep(rand() % 3);


        sem_post(&forks[left]);
        printf("Philosopher %d put down fork %d (left).\n", id, left);

        sem_post(&forks[right]);
        printf("Philosopher %d put down fork %d (right).\n", id, right);
    }
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int ids[NUM_PHILOSOPHERS];

    for(int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&forks[i], 0, 1);
    }


    for(int i = 0; i < NUM_PHILOSOPHERS; i++) {
        ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &ids[i]);
    }


    for(int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    for(int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&forks[i]);
    }

    return 0;
}
