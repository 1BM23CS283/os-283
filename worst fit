#include <stdio.h>

void worstFit(int blockSize[], int m, int processSize[], int n) {

    int allocation[n];


    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
    }


    for (int i = 0; i < n; i++) {
        // Find the worst (largest) block for the current process
        int worstIdx = -1;
        for (int j = 0; j < m; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (worstIdx == -1 || blockSize[j] > blockSize[worstIdx]) {
                    worstIdx = j;
                }
            }
        }


        if (worstIdx != -1) {
            allocation[i] = worstIdx;
            blockSize[worstIdx] -= processSize[i]; // Reduce the available size of the block
        }
    }

    printf("\nProcess No. \tProcess Size \tBlock no. \tBlock Size\n");
    for (int i = 0; i < n; i++) {
        printf(" %d \t\t %d \t\t", i + 1, processSize[i]);
        if (allocation[i] != -1) {
            printf("%d \t\t %d\n", allocation[i] + 1, blockSize[allocation[i]]);
        } else {
            printf("Not Allocated\n");
        }
    }
}

int main() {
    int m, n;

    
    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);


    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int blockSize[m];
    int processSize[n];


    printf("Enter the sizes of the memory blocks:\n");
    for (int i = 0; i < m; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blockSize[i]);
    }

    printf("Enter the sizes of the processes:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processSize[i]);
    }

   
    worstFit(blockSize, m, processSize, n);

    return 0;
}
