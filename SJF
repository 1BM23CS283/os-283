#include <stdio.h>
 #include <limits.h>
 
 void findWaitingTime(int processes[], int n, int bt[], int at[], int wt[]) {
     int remainingProcesses = n;
     int completed = 0;
     int currentTime = 0;
     int minBurstTime;
     int minIndex;
     int isCompleted[n];
 
     for (int i = 0; i < n; i++) {
         isCompleted[i] = 0;
     }
 
     while (completed < n) {
         minBurstTime = INT_MAX;
         minIndex = -1;
         for (int i = 0; i < n; i++) {
             if (at[i] <= currentTime && !isCompleted[i] && bt[i] < minBurstTime) {
                 minBurstTime = bt[i];
                 minIndex = i;
             }
         }
 
         if (minIndex == -1) {
             currentTime++;
             continue;
         }
 
         wt[minIndex] = currentTime - at[minIndex];
         currentTime += bt[minIndex];
         isCompleted[minIndex] = 1;
         completed++;
 }
 
 void findTurnAroundTime(int processes[], int n, int bt[], int wt[], int tat[]) {
     for (int i = 0; i < n; i++) {
         tat[i] = bt[i] + wt[i];
     }
 }
 
 void findAverageTimes(int processes[], int n, int bt[], int at[]) {
     int wt[n], tat[n];
 
     findWaitingTime(processes, n, bt, at, wt);
     findTurnAroundTime(processes, n, bt, wt, tat);
 
     int total_wt = 0, total_tat = 0;
 
     printf("Process\tBurst Time\tArrival Time\tWaiting Time\tTurnaround Time\n");
     for (int i = 0; i < n; i++) {
         total_wt += wt[i];
         total_tat += tat[i];
         printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i], bt[i], at[i], wt[i], tat[i]);
     }
 
     float avg_wt = (float)total_wt / n;
     float avg_tat = (float)total_tat / n;
 
     printf("\nAverage Waiting Time: %.2f", avg_wt);
     printf("\nAverage Turnaround Time: %.2f\n", avg_tat);
 }
 
 int main() {
     int n;
 
     printf("Enter number of processes: ");
     scanf("%d", &n);
 
     int processes[n], bt[n], at[n];
 
     printf("Enter Burst Times and Arrival Times for each process:\n");
     for (int i = 0; i < n; i++) {
         printf("Process %d:\n", i + 1);
         processes[i] = i + 1;
         printf("Burst Time: ");
         scanf("%d", &bt[i]);
         printf("Arrival Time: ");
         scanf("%d", &at[i]);
     }
 
     findAverageTimes(processes, n, bt, at);
 
     return 0;
 }
output:
Enter number of processes: 4
Enter Burst Times and Arrival Times for each process:
Process 1:
Burst Time: 7
Arrival Time: 0
Process 2:
Burst Time: 3
Arrival Time: 8
Process 3:
Burst Time: 4
Arrival Time: 3
Process 4:
Burst Time: 6
Arrival Time: 5
Process Burst Time      Arrival Time    Waiting Time    Turnaround Time
1               7               0               0               7
2               3               8               3               6
3               4               3               4               8
4               6               5               9               15

Average Waiting Time: 4.00
Average Turnaround Time: 9.00

Process returned 0 (0x0)   execution time : 30.850 s
Press any key to continue.

