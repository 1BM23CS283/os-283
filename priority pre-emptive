#include <stdio.h>

void sortProcesses(int n, int at[], int bt[], int pr[], int index[])
{
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = i + 1; j < n; j++) 
        {
            if (at[i] > at[j])
            {
                
                int temp = at[i];
                at[i] = at[j];
                at[j] = temp;
                temp = bt[i];
                bt[i] = bt[j];
                bt[j] = temp;
                temp = pr[i];
                pr[i] = pr[j];
                pr[j] = temp;
                temp = index[i];
                index[i] = index[j];
                index[j] = temp;
            }
        }
    }
}

void calculateTimes(int n, int at[], int bt[], int pr[], int index[])
{
    int remaining_bt[n], ct[n], tat[n], wt[n], completed = 0, current_time = 0;
    float total_wt = 0, total_tat = 0;

    for (int i = 0; i < n; i++) 
    {
        remaining_bt[i] = bt[i]; 
        ct[i] = 0;
    }

    while (completed < n)
    {
        int highest_priority = -1;
        for (int i = 0; i < n; i++) 
        {
            if (at[i] <= current_time && remaining_bt[i] > 0)
            {
                if (highest_priority == -1 || pr[i] < pr[highest_priority]) 
                {
                    highest_priority = i;
                }
            }
        }

        if (highest_priority == -1)
        {
            current_time++;
            continue;
        }
        remaining_bt[highest_priority]--;
        current_time++;

        if (remaining_bt[highest_priority] == 0) 
        {
            completed++;
            ct[highest_priority] = current_time;
        }
    }
    for (int i = 0; i < n; i++)
    {
        tat[i] = ct[i] - at[i];
        wt[i] = tat[i] - bt[i];
        total_wt += wt[i];
        total_tat += tat[i];
    }

    printf("\nProcess\tAT\tBT\tPriority\tCT\tTAT\tWT\n");
    for (int i = 0; i < n; i++) 
    {
        int original_index = index[i];
        printf("%d\t%d\t%d\t%d\t\t%d\t%d\t%d\n", original_index + 1, at[i], bt[i], pr[i], ct[i], tat[i], wt[i]);
    }
    printf("\nAverage Waiting Time: %.2f\n", total_wt / n);
    printf("Average Turnaround Time: %.2f\n", total_tat / n);
}
int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    int at[n], bt[n], pr[n], index[n];
    for (int i = 0; i < n; i++)
    {
        printf("Enter arrival time, burst time, and priority for process %d: ", i + 1);
        scanf("%d %d %d", &at[i], &bt[i], &pr[i]);
        index[i] = i; // Store original index
    }
    sortProcesses(n, at, bt, pr, index);
    calculateTimes(n, at, bt, pr, index);
    return 0;
}
 Enter number of processes: 3
 Enter AT, BT, and Priority P1: 2
 4
 1
 Enter AT, BT, and Priority P2: 3
 5
 2
 Enter AT, BT, and Priority P3: 7
 9
 1
 
 Choose Scheduling Algorithm:
 1. Preemptive Priority Scheduling
 2. Non-Preemptive Priority Scheduling
 Enter choice: 2
 
 P#      AT      BT      PR      CT      TAT     WT
 1       2       4       1       6       4       0
 2       3       5       2       11      8       3
 3       7       9       1       20      13      4
 Average TAT: 8.33
 Average WT: 2.33
