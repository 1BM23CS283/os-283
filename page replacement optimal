#include <stdio.h>

#define MAX 100


int predict(int pages[], int frame[], int n, int index, int frames) {
    int farthest = index, result = -1;

    for (int i = 0; i < frames; i++) {
        int j;
        for (j = index; j < n; j++) {
            if (frame[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    result = i;
                }
                break;
            }
        }

  
        if (j == n)
            return i;


        if (result == -1)
            result = 0;
    }

    return result;
}

void optimal(int pages[], int n, int frames) {
    int frame[frames];
    int pageFaults = 0;

    for (int i = 0; i < frames; i++)
        frame[i] = -1;

    printf("\nOptimal Page Replacement:\n");

    for (int i = 0; i < n; i++) {
        int page = pages[i], found = 0;

        for (int j = 0; j < frames; j++) {
            if (frame[j] == page) {
                found = 1;
                break;
            }
        }

        
        if (!found) {
            int pos = -1;

            for (int j = 0; j < frames; j++) {
                if (frame[j] == -1) {
                    pos = j;
                    break;
                }
            }

            
            if (pos == -1)
                pos = predict(pages, frame, n, i + 1, frames);

            frame[pos] = page;
            pageFaults++;
        }

        printf("After page %2d -> [ ", page);
        for (int j = 0; j < frames; j++) {
            if (frame[j] != -1)
                printf("%2d ", frame[j]);
            else
                printf(" - ");
        }
        printf("]\n");
    }

    printf("\nTotal Page Faults = %d\n", pageFaults);
}

int main() {
    int pages[MAX], n, frames;

    printf("Enter number of pages: ");
    scanf("%d", &n);

    printf("Enter the page reference string:\n");
    for (int i = 0; i < n; i++)
        scanf("%d", &pages[i]);

    printf("Enter number of frames: ");
    scanf("%d", &frames);

    optimal(pages, n, frames);

    return 0;
}

OUTPUT
Enter number of pages: 3
Enter the page reference string:
9 8 7
Enter number of frames: 4

Optimal Page Replacement:
After page  9 -> [  9  -  -  - ]
After page  8 -> [  9  8  -  - ]
After page  7 -> [  9  8  7  - ]

Total Page Faults = 3

Process returned 0 (0x0)   execution time : 10.875 s
Press any key to continue.
