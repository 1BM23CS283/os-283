#include <stdio.h>

void firstFit(int blockSize[], int m, int processSize[], int n) {
 
    int allocation[n];

   
    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
    }

    for (int i = 0; i < n; i++) {
        // Find the first block that is big enough for the process
        for (int j = 0; j < m; j++) {
            
            if (blockSize[j] >= processSize[i]) {
               
                allocation[i] = j;

                blockSize[j] -= processSize[i];
                break;
            }
        }
    }

   
    printf("\nProcess No. \tProcess Size \tBlock no. \tBlock Size\n");
    for (int i = 0; i < n; i++) {
        printf(" %d \t\t %d \t\t", i + 1, processSize[i]);
        if (allocation[i] != -1) {
            printf("%d \t\t %d\n", allocation[i] + 1, blockSize[allocation[i]]);
        } else {
            printf("Not Allocated\n");
        }
    }
}

int main() {
    int m, n;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);


    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int blockSize[m];
    int processSize[n];

    printf("Enter the sizes of the memory blocks:\n");
    for (int i = 0; i < m; i++) {
        printf("Block %d: ", i + 1);
        scanf("%d", &blockSize[i]);
    }

    printf("Enter the sizes of the processes:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d: ", i + 1);
        scanf("%d", &processSize[i]);
    }

  
    firstFit(blockSize, m, processSize, n);

    return 0;
}
